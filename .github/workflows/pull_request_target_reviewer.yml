# This workflow will triage pull requests and apply a label based on the
# paths that are modified in the pull request.
#
# To use this workflow, you will need to set up a .github/labeler.yml
# file with configuration.  For more information, see:
# https://github.com/actions/labeler

name: PR target
on:
 pull_request_review:
   types: [submitted,edited]
   
jobs:
  test:
    runs-on: ubuntu-latest
    # if: github.event.action == 'labeled' && github.event.label.name == 'bug'
    steps:
      # - name: Checkout code
      #   uses: actions/checkout@v2
      - name: Author
        id: author
        run: |
          echo "github.event.issue.user.login: ${{ github.event.issue.user.login }}"
          echo "github.event.pull_request.user.login: ${{ github.event.pull_request.user.login }}"
          echo "github.event.pull_request.state: ${{ github.event.pull_request.state }}"
          echo "github.event.action: ${{ github.event.action }}"
          echo "github.event.state: ${{ github.event.state }}"
      - name: "Info"
        uses: actions/github-script@v3
        continue-on-error: true
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            console.log(context)
            console.log(github)

      # - name: Assign pull requests to Community Operator Submissions project
      #   uses: srggrs/assign-one-project-github-action@1.2.1
      #   if: github.event.action == 'opened' || github.event.action == 'reopened'
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   continue-on-error: true
      #   with:
      #     project: 'https://github.com/operator-framework/community-operators/projects/1'
      - name: "Request reviewer (test)"
        uses: actions/github-script@v3
        continue-on-error: true
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              reviewers: [ "mvalahtv", "J0zi" ]
            });

      - uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            // Get a list of all issues created by the PR opener
            // See: https://octokit.github.io/rest.js/#pagination
            const creator = context.payload.sender.login
            const opts = github.issues.listForRepo.endpoint.merge({
              ...context.issue,
              creator,
              state: 'all'
            })
            const issues = await github.paginate(opts)

            for (const issue of issues) {
              if (issue.number === context.issue.number) {
                continue
              }
              if (issue.pull_request) {
                return // Creator is already a contributor.
              }
            }

            await github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'Welcome, new contributor!'
            })  

      # - name: automerge
      #   uses: "pascalgn/automerge-action@v0.13.1"
      #   env:
      #     GITHUB_TOKEN: "${{ secrets.MERGE }}"
      #     MERGE_LABELS: "Triage,!work in progress"
      #     MERGE_REMOVE_LABELS: "Triage"
      #     MERGE_METHOD: "squash"
      #     MERGE_COMMIT_MESSAGE: "pull-request-title"
      #     MERGE_FORKS: "true"
      #     MERGE_RETRIES: "6"
      #     MERGE_RETRY_SLEEP: "10000"
      #     UPDATE_LABELS: ""
      #     UPDATE_METHOD: "rebase"


      # - name: Operator traffic light
      #   id: op-traffic-light
      #   run: |
      #     echo "::set-output name=op_test_stream::upstream-community-operators"
      #     echo "::set-output name=op_test_name::aqua"
      #     exit 2
      # - name: Is aqua
      #   if: always() && op-traffic-light.outputs.op_test_name == 'aqua'
      #   run: |
      #     echo "Aqua"
      # - name: Is not aqua
      #   if: always() && op-traffic-light.outputs.op_test_name != 'aqua'
      #   run: |
      #     echo "Not Aqua"

      # - name: Test
      #   id: test
      #   run: |
      #     cat ${{ steps.op-traffic-light.outputs.op_test_stream }}/${{ steps.op-traffic-light.outputs.op_test_name }}/ci.yaml

      # - uses: kentaro-m/auto-assign-action@v1.1.2
      #   with:
      #     configuration-path: "${{ steps.op-traffic-light.outputs.op_test_stream }}/${{ steps.op-traffic-light.outputs.op_test_name }}/ci.yaml"

    # - uses: actions/labeler@v2
    #   with:
    #     repo-token: "${{ secrets.GITHUB_TOKEN }}"
    # - uses: mshick/add-pr-comment@v1
    #   with:
    #     message: |
    #       Simple PR
    #     repo-token: ${{ secrets.GITHUB_TOKEN }}
    #     repo-token-user-login: 'github-actions[bot]' # The user.login for temporary GitHub tokens
    #     allow-repeats: true # This is the default
    # - uses: mshick/add-pr-comment@v1
    #   with:
    #     message: |
    #       /draft
    #     repo-token: ${{ secrets.GITHUB_TOKEN }}
    #     repo-token-user-login: 'github-actions[bot]' # The user.login for temporary GitHub tokens
    #     allow-repeats: true # This is the default
    # - uses: actions/github-script@v3
    #   with:
    #     github-token: ${{secrets.GITHUB_TOKEN}}
    #     script: |
    #       github.issues.createComment({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         body: 'ðŸ‘‹ Thanks for reporting!'
    #       })
    # - uses: actions/github-script@v3
    #   with:
    #     github-token: ${{secrets.GITHUB_TOKEN}}
    #     script: |
    #       github.issues.addLabels({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         labels: ['Triage']
    #       })
    # - uses: actions/github-script@v3
    #   with:
    #     github-token: ${{secrets.GITHUB_TOKEN}}
    #     script: |
    #       // Get a list of all issues created by the PR opener
    #       // See: https://octokit.github.io/rest.js/#pagination
    #       const creator = context.payload.sender.login
    #       const opts = github.issues.listForRepo.endpoint.merge({
    #         ...context.issue,
    #         creator,
    #         state: 'all'
    #       })
    #       const issues = await github.paginate(opts)

    #       for (const issue of issues) {
    #         if (issue.number === context.issue.number) {
    #           continue
    #         }
    #         if (issue.pull_request) {
    #           return // Creator is already a contributor.
    #         }
    #       }

    #       await github.issues.createComment({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         body: 'Welcome, new contributor!'
    #       })  
    # - name: View context attributes
    #   uses: actions/github-script@v3
    #   with:
    #     github-token: ${{secrets.GITHUB_TOKEN}}
    #     script: console.log(github.issues)
    # - name: Slash Command Dispatch